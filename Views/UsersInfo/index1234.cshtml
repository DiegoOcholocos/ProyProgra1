<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Api fetch</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="main.css">
</head>

<body>
    <div id="crud" class="container mt-4 p-3 mb-5 bg-body rounded shadow-lg">
        <h3 class="text-center">CRUD</h3>
        <button type="button" id="btnCrear" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal"
        >Crear</button>
        <table id="tablaCrud" class="table table-bordered table-striped mt-2">
            <thead>
                <tr class="text-center">
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Email</th>
                    <th>Username</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                <!-- Content rellenado por fetch -->
            </tbody>
        </table>
    </div>

    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Crear item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form  method="POST">
                        <div class="mb-3">
                            <label for="nombre" class="col-form-label">Nombre:</label>
                            <input type="text" class="form-control" id="nombre">
                        </div>
                        <div class="mb-3">
                            <label for="email" class="col-form-label">Email:</label>
                            <input type="text" class="form-control" id="email">
                        </div>
                        <div class="mb-3">
                            <label for="username" class="col-form-label">Username:</label>
                            <input type="text" class="form-control" id="username">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="close" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="button" id="send" class="btn btn-primary">Crear</button>
                </div>
                <span class="text-center" style="color: red">Hey! Completa los campos antes de enviar!</span>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"></script>
    <script src="index.js"></script>
    
</body>
<script>
'use strict'

const url = 'https://jsonplaceholder.typicode.com/users'
const content = document.querySelector('tbody')
let template = ''

//crea un modal con boostrap
const myModal = new bootstrap.Modal(document.getElementById('exampleModal'))
//capturando datos
const form = document.querySelector('form')
const nombre = document.querySelector('#nombre')
const username = document.querySelector('#username')
const email = document.querySelector('#email')
const btnCrear = document.querySelector('#btnCrear')
const advice = document.querySelector('span')
const enviar = document.querySelector('#send')

advice.style.display = 'none'

let option = ''
//Crear usuario
btnCrear.addEventListener('click', (e) => {
    clear()
    myModal.show()
    option = 'crear'
    console.log("btnCrear presionado")
})


//clear
const clear = () => {
    nombre.value = ''
    username.value = ''
    email.value = ''
    advice.style.display = 'none'
}

//Procedimiento de como mostrar los registro, consumiendo API:
const loadResults = async () => {
    try {
        const response = await fetch(url)
        const data = await response.json()
        return data

    } catch (err) {
        console.log(err)

    }
}

//enviar resultados del modal
const postUsers = async () => {
    try {
        const body = {
            method: 'POST',
            body: JSON.stringify({
                name: nombre.value,
                email: email.value,
                username: username.value
            }),
            headers: {
                'Accept': "application/json",
                'Content-type': "application/json"
            }
        }

        const response = await fetch(url, body)
        const data = await response.json()
        console.log(data)
        let user = new Array()
        user.push(data)
        showResults(user)

    } catch (err) {
        console.log(err)
    }
}

//Borrar con api propia:
//const deleteUsers = async (id) => {
//     try {
//         const body = {
//             method: "DELETE",
//             body: JSON.stringify({
//                 id: id
//             }),
//             headers: {
//                 'Accept': "application/json",
//                 'Content-type': "application/json"
//             }
//         }

//         const response = await fetch(`${url}/${id}`, body)
//         const data = response.json()
//         console.log(data)

//     } catch (err) {
//         console.log(err)
//     }
// }

//Listar usuarios:
const showResults = (results) => {
    results.map(user => {
        template += `
                        <tr class="text-center">
                            <td>${user.id}</td>
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td>${user.username}</td>
                            <td><a class="btnEditar btn btn-warning">Editar</a> <a class="btnBorrar btn btn-danger">Borrar<a/></td>
                        </tr>
                    `

    })
    content.innerHTML = template
}

//GET
loadResults()
    .then(data => showResults(data))
    .catch(err => console.log(err))


//Emulando metodo on jQuery para acceder a los botones
const on = (element, event, selector, handler) => {
    element.addEventListener(event, e => {
        //toma el target mas cercano al selector o el mismo selector
        if (e.target.closest(selector)) {
            handler(e)
        }
    })
}

//DELETE
const deleteUsers = async (id) => {
    try {
        const config = {
            method: 'DELETE'
        }

        const response = await fetch(`${url}/${id}`, config)
        console.log(response)

    } catch (err) {
        console.log(err)
    }
}

//Procedimiento borrar
on(document, 'click', '.btnBorrar', (e) => {
    //forma 1 de capturar id en una tabla
    const fila = e.target.parentNode.parentNode
    const id = fila.firstElementChild.innerHTML
    //Borrar con Api publica:
    deleteUsers(id)
})

//Procediento editar
let idFrom = 0
on(document, 'click', '.btnEditar', e => {
    //forma 2 de capturar id en una tabla
    const fila = e.target.parentNode.parentNode

    idFrom = fila.children[0].innerHTML
    const nombreUpdate = fila.children[1].innerHTML
    const emailUpdate = fila.children[2].innerHTML
    const usernameUpdate = fila.children[3].innerHTML

    nombre.value = nombreUpdate
    email.value = emailUpdate
    username.value = usernameUpdate
    option = 'editar'
    console.log(option)
    myModal.show()

    console.log(idFrom, nombreUpdate, emailUpdate, usernameUpdate)
})

//PUT
const updateUser = async (id) => {
    try {
        const body = {
            method: 'PUT',
            body: JSON.stringify({
                name: nombre.value,
                email: email.value,
                username: username.value
            }),
            headers: {
                'Accept': "application/json",
                'Content-type': "application/json"
            }
        }

        const response = await fetch(`${url}/${id}`, body)
        const data = await response.json()
        myModal.hide()
        console.log(data)

    } catch (err) {
        console.log(err)
    }
}

//Evento de formulario
enviar.addEventListener('click', e => {
    e.preventDefault()
    console.log("submit realizado")
    if (option == 'crear') {
        if (nombre.value != '' || email.value != '' || username.value != '') {
            postUsers()
            myModal.hide()
            console.log("opcion crear")
        } else {
            advice.style.display = 'block'
        }
    }

    if (option == 'editar') {
        updateUser(idFrom)
    }

})
</script>

</html>